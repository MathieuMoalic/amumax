package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"sync"
	"unsafe"

	"github.com/MathieuMoalic/amumax/src/cuda/cu"
	"github.com/MathieuMoalic/amumax/src/timer"
)

// CUDA handle for settemperature2 kernel
var settemperature2Code cu.Function

// Stores the arguments for settemperature2 kernel invocation
type settemperature2ArgsT struct {
	argB           unsafe.Pointer
	argNoise       unsafe.Pointer
	argKB2VgammaDt float32
	argMs          unsafe.Pointer
	argMsMul       float32
	argTemp        unsafe.Pointer
	argTempMul     float32
	argAlpha       unsafe.Pointer
	argAlphaMul    float32
	argN           int
	argptr         [10]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for settemperature2 kernel invocation
var settemperature2Args settemperature2ArgsT

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	settemperature2Args.argptr[0] = unsafe.Pointer(&settemperature2Args.argB)
	settemperature2Args.argptr[1] = unsafe.Pointer(&settemperature2Args.argNoise)
	settemperature2Args.argptr[2] = unsafe.Pointer(&settemperature2Args.argKB2VgammaDt)
	settemperature2Args.argptr[3] = unsafe.Pointer(&settemperature2Args.argMs)
	settemperature2Args.argptr[4] = unsafe.Pointer(&settemperature2Args.argMsMul)
	settemperature2Args.argptr[5] = unsafe.Pointer(&settemperature2Args.argTemp)
	settemperature2Args.argptr[6] = unsafe.Pointer(&settemperature2Args.argTempMul)
	settemperature2Args.argptr[7] = unsafe.Pointer(&settemperature2Args.argAlpha)
	settemperature2Args.argptr[8] = unsafe.Pointer(&settemperature2Args.argAlphaMul)
	settemperature2Args.argptr[9] = unsafe.Pointer(&settemperature2Args.argN)
}

// Wrapper for settemperature2 CUDA kernel, asynchronous.
func kSettemperature2Async(B unsafe.Pointer, noise unsafe.Pointer, kB2VgammaDt float32, Ms_ unsafe.Pointer, MsMul float32, temp_ unsafe.Pointer, tempMul float32, alpha_ unsafe.Pointer, alphaMul float32, N int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("settemperature2")
	}

	settemperature2Args.Lock()
	defer settemperature2Args.Unlock()

	if settemperature2Code == 0 {
		settemperature2Code = fatbinLoad(settemperature2Map, "settemperature2")
	}

	settemperature2Args.argB = B
	settemperature2Args.argNoise = noise
	settemperature2Args.argKB2VgammaDt = kB2VgammaDt
	settemperature2Args.argMs = Ms_
	settemperature2Args.argMsMul = MsMul
	settemperature2Args.argTemp = temp_
	settemperature2Args.argTempMul = tempMul
	settemperature2Args.argAlpha = alpha_
	settemperature2Args.argAlphaMul = alphaMul
	settemperature2Args.argN = N

	args := settemperature2Args.argptr[:]
	cu.LaunchKernel(settemperature2Code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("settemperature2")
	}
}

// maps compute capability on PTX code for settemperature2 kernel.
var settemperature2Map = map[int]string{
	0:  "",
	52: settemperature2Ptx52,
}

// settemperature2 PTX code for various compute capabilities.
const (
	settemperature2Ptx52 = `
.version 7.0
.target sm_52
.address_size 64

	// .globl	settemperature2

.visible .entry settemperature2(
	.param .u64 settemperature2_param_0,
	.param .u64 settemperature2_param_1,
	.param .f32 settemperature2_param_2,
	.param .u64 settemperature2_param_3,
	.param .f32 settemperature2_param_4,
	.param .u64 settemperature2_param_5,
	.param .f32 settemperature2_param_6,
	.param .u64 settemperature2_param_7,
	.param .f32 settemperature2_param_8,
	.param .u32 settemperature2_param_9
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<27>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<20>;


	ld.param.u64 	%rd1, [settemperature2_param_0];
	ld.param.u64 	%rd2, [settemperature2_param_1];
	ld.param.f32 	%f9, [settemperature2_param_2];
	ld.param.u64 	%rd3, [settemperature2_param_3];
	ld.param.f32 	%f23, [settemperature2_param_4];
	ld.param.u64 	%rd4, [settemperature2_param_5];
	ld.param.f32 	%f25, [settemperature2_param_6];
	ld.param.u64 	%rd5, [settemperature2_param_7];
	ld.param.f32 	%f26, [settemperature2_param_8];
	ld.param.u32 	%r2, [settemperature2_param_9];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_10;

	setp.eq.s64	%p2, %rd3, 0;
	@%p2 bra 	BB0_3;

	cvta.to.global.u64 	%rd6, %rd3;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.nc.f32 	%f13, [%rd8];
	mul.f32 	%f23, %f13, %f23;

BB0_3:
	setp.eq.f32	%p3, %f23, 0f00000000;
	mov.f32 	%f24, 0f00000000;
	@%p3 bra 	BB0_5;

	rcp.rn.f32 	%f24, %f23;

BB0_5:
	setp.eq.s64	%p4, %rd4, 0;
	@%p4 bra 	BB0_7;

	cvta.to.global.u64 	%rd9, %rd4;
	mul.wide.s32 	%rd10, %r1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.nc.f32 	%f15, [%rd11];
	mul.f32 	%f25, %f15, %f25;

BB0_7:
	setp.eq.s64	%p5, %rd5, 0;
	@%p5 bra 	BB0_9;

	cvta.to.global.u64 	%rd12, %rd5;
	mul.wide.s32 	%rd13, %r1, 4;
	add.s64 	%rd14, %rd12, %rd13;
	ld.global.nc.f32 	%f16, [%rd14];
	mul.f32 	%f26, %f16, %f26;

BB0_9:
	cvta.to.global.u64 	%rd15, %rd1;
	cvta.to.global.u64 	%rd16, %rd2;
	mul.wide.s32 	%rd17, %r1, 4;
	add.s64 	%rd18, %rd16, %rd17;
	mul.f32 	%f17, %f26, %f9;
	mul.f32 	%f18, %f25, %f17;
	mul.f32 	%f19, %f24, %f18;
	sqrt.rn.f32 	%f20, %f19;
	ld.global.nc.f32 	%f21, [%rd18];
	mul.f32 	%f22, %f21, %f20;
	add.s64 	%rd19, %rd15, %rd17;
	st.global.f32 	[%rd19], %f22;

BB0_10:
	ret;
}


`
)
