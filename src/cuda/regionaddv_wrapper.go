package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"sync"
	"unsafe"

	"github.com/MathieuMoalic/amumax/src/cuda/cu"
	"github.com/MathieuMoalic/amumax/src/timer"
)

// CUDA handle for regionaddv kernel
var regionaddvCode cu.Function

// Stores the arguments for regionaddv kernel invocation
type regionaddvArgsT struct {
	argDstx    unsafe.Pointer
	argDsty    unsafe.Pointer
	argDstz    unsafe.Pointer
	argLUTx    unsafe.Pointer
	argLUTy    unsafe.Pointer
	argLUTz    unsafe.Pointer
	argRegions unsafe.Pointer
	argN       int
	argptr      [8]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for regionaddv kernel invocation
var regionaddvArgs regionaddvArgsT

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	regionaddvArgs.argptr[0] = unsafe.Pointer(&regionaddvArgs.argDstx)
	regionaddvArgs.argptr[1] = unsafe.Pointer(&regionaddvArgs.argDsty)
	regionaddvArgs.argptr[2] = unsafe.Pointer(&regionaddvArgs.argDstz)
	regionaddvArgs.argptr[3] = unsafe.Pointer(&regionaddvArgs.argLUTx)
	regionaddvArgs.argptr[4] = unsafe.Pointer(&regionaddvArgs.argLUTy)
	regionaddvArgs.argptr[5] = unsafe.Pointer(&regionaddvArgs.argLUTz)
	regionaddvArgs.argptr[6] = unsafe.Pointer(&regionaddvArgs.argRegions)
	regionaddvArgs.argptr[7] = unsafe.Pointer(&regionaddvArgs.argN)
}

// Wrapper for regionaddv CUDA kernel, asynchronous.
func kRegionaddvAsync(dstx unsafe.Pointer, dsty unsafe.Pointer, dstz unsafe.Pointer, LUTx unsafe.Pointer, LUTy unsafe.Pointer, LUTz unsafe.Pointer, regions unsafe.Pointer, N int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("regionaddv")
	}

	regionaddvArgs.Lock()
	defer regionaddvArgs.Unlock()

	if regionaddvCode == 0 {
		regionaddvCode = fatbinLoad(regionaddvMap, "regionaddv")
	}

	regionaddvArgs.argDstx = dstx
	regionaddvArgs.argDsty = dsty
	regionaddvArgs.argDstz = dstz
	regionaddvArgs.argLUTx = LUTx
	regionaddvArgs.argLUTy = LUTy
	regionaddvArgs.argLUTz = LUTz
	regionaddvArgs.argRegions = regions
	regionaddvArgs.argN = N

	args := regionaddvArgs.argptr[:]
	cu.LaunchKernel(regionaddvCode, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("regionaddv")
	}
}

// maps compute capability on PTX code for regionaddv kernel.
var regionaddvMap = map[int]string{
	0:  "",
	52: regionaddvPtx52,
}

// regionaddv PTX code for various compute capabilities.
const (
	regionaddvPtx52 = `
.version 7.0
.target sm_52
.address_size 64

	// .globl	regionaddv

.visible .entry regionaddv(
	.param .u64 regionaddv_param_0,
	.param .u64 regionaddv_param_1,
	.param .u64 regionaddv_param_2,
	.param .u64 regionaddv_param_3,
	.param .u64 regionaddv_param_4,
	.param .u64 regionaddv_param_5,
	.param .u64 regionaddv_param_6,
	.param .u32 regionaddv_param_7
)
{
	.reg .pred 	%p<2>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<10>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<25>;


	ld.param.u64 	%rd1, [regionaddv_param_0];
	ld.param.u64 	%rd2, [regionaddv_param_1];
	ld.param.u64 	%rd3, [regionaddv_param_2];
	ld.param.u64 	%rd4, [regionaddv_param_3];
	ld.param.u64 	%rd5, [regionaddv_param_4];
	ld.param.u64 	%rd6, [regionaddv_param_5];
	ld.param.u64 	%rd7, [regionaddv_param_6];
	ld.param.u32 	%r2, [regionaddv_param_7];
	mov.u32 	%r3, %ctaid.y;
	mov.u32 	%r4, %nctaid.x;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r4, %r3, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_2;

	cvta.to.global.u64 	%rd8, %rd7;
	cvt.s64.s32	%rd9, %r1;
	add.s64 	%rd10, %rd8, %rd9;
	ld.global.nc.u8 	%rs1, [%rd10];
	cvta.to.global.u64 	%rd11, %rd4;
	cvt.u32.u16	%r9, %rs1;
	and.b32  	%r10, %r9, 255;
	mul.wide.u32 	%rd12, %r10, 4;
	add.s64 	%rd13, %rd11, %rd12;
	cvta.to.global.u64 	%rd14, %rd1;
	mul.wide.s32 	%rd15, %r1, 4;
	add.s64 	%rd16, %rd14, %rd15;
	ld.global.f32 	%f1, [%rd16];
	ld.global.nc.f32 	%f2, [%rd13];
	add.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd16], %f3;
	cvta.to.global.u64 	%rd17, %rd5;
	add.s64 	%rd18, %rd17, %rd12;
	cvta.to.global.u64 	%rd19, %rd2;
	add.s64 	%rd20, %rd19, %rd15;
	ld.global.f32 	%f4, [%rd20];
	ld.global.nc.f32 	%f5, [%rd18];
	add.f32 	%f6, %f5, %f4;
	st.global.f32 	[%rd20], %f6;
	cvta.to.global.u64 	%rd21, %rd6;
	add.s64 	%rd22, %rd21, %rd12;
	cvta.to.global.u64 	%rd23, %rd3;
	add.s64 	%rd24, %rd23, %rd15;
	ld.global.f32 	%f7, [%rd24];
	ld.global.nc.f32 	%f8, [%rd22];
	add.f32 	%f9, %f8, %f7;
	st.global.f32 	[%rd24], %f9;

BB0_2:
	ret;
}


`
)
