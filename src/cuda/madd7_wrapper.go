package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"sync"
	"unsafe"

	"github.com/MathieuMoalic/amumax/src/cuda/cu"
	"github.com/MathieuMoalic/amumax/src/timer"
)

// CUDA handle for madd7 kernel
var madd7Code cu.Function

// Stores the arguments for madd7 kernel invocation
type madd7ArgsT struct {
	argDst  unsafe.Pointer
	argSrc1 unsafe.Pointer
	argFac1 float32
	argSrc2 unsafe.Pointer
	argFac2 float32
	argSrc3 unsafe.Pointer
	argFac3 float32
	argSrc4 unsafe.Pointer
	argFac4 float32
	argSrc5 unsafe.Pointer
	argFac5 float32
	argSrc6 unsafe.Pointer
	argFac6 float32
	argSrc7 unsafe.Pointer
	argFac7 float32
	argN    int
	argptr   [16]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for madd7 kernel invocation
var madd7Args madd7ArgsT

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	madd7Args.argptr[0] = unsafe.Pointer(&madd7Args.argDst)
	madd7Args.argptr[1] = unsafe.Pointer(&madd7Args.argSrc1)
	madd7Args.argptr[2] = unsafe.Pointer(&madd7Args.argFac1)
	madd7Args.argptr[3] = unsafe.Pointer(&madd7Args.argSrc2)
	madd7Args.argptr[4] = unsafe.Pointer(&madd7Args.argFac2)
	madd7Args.argptr[5] = unsafe.Pointer(&madd7Args.argSrc3)
	madd7Args.argptr[6] = unsafe.Pointer(&madd7Args.argFac3)
	madd7Args.argptr[7] = unsafe.Pointer(&madd7Args.argSrc4)
	madd7Args.argptr[8] = unsafe.Pointer(&madd7Args.argFac4)
	madd7Args.argptr[9] = unsafe.Pointer(&madd7Args.argSrc5)
	madd7Args.argptr[10] = unsafe.Pointer(&madd7Args.argFac5)
	madd7Args.argptr[11] = unsafe.Pointer(&madd7Args.argSrc6)
	madd7Args.argptr[12] = unsafe.Pointer(&madd7Args.argFac6)
	madd7Args.argptr[13] = unsafe.Pointer(&madd7Args.argSrc7)
	madd7Args.argptr[14] = unsafe.Pointer(&madd7Args.argFac7)
	madd7Args.argptr[15] = unsafe.Pointer(&madd7Args.argN)
}

// Wrapper for madd7 CUDA kernel, asynchronous.
func kMadd7Async(dst unsafe.Pointer, src1 unsafe.Pointer, fac1 float32, src2 unsafe.Pointer, fac2 float32, src3 unsafe.Pointer, fac3 float32, src4 unsafe.Pointer, fac4 float32, src5 unsafe.Pointer, fac5 float32, src6 unsafe.Pointer, fac6 float32, src7 unsafe.Pointer, fac7 float32, N int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("madd7")
	}

	madd7Args.Lock()
	defer madd7Args.Unlock()

	if madd7Code == 0 {
		madd7Code = fatbinLoad(madd7Map, "madd7")
	}

	madd7Args.argDst = dst
	madd7Args.argSrc1 = src1
	madd7Args.argFac1 = fac1
	madd7Args.argSrc2 = src2
	madd7Args.argFac2 = fac2
	madd7Args.argSrc3 = src3
	madd7Args.argFac3 = fac3
	madd7Args.argSrc4 = src4
	madd7Args.argFac4 = fac4
	madd7Args.argSrc5 = src5
	madd7Args.argFac5 = fac5
	madd7Args.argSrc6 = src6
	madd7Args.argFac6 = fac6
	madd7Args.argSrc7 = src7
	madd7Args.argFac7 = fac7
	madd7Args.argN = N

	args := madd7Args.argptr[:]
	cu.LaunchKernel(madd7Code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("madd7")
	}
}

// maps compute capability on PTX code for madd7 kernel.
var madd7Map = map[int]string{
	0:  "",
	52: madd7Ptx52,
}

// madd7 PTX code for various compute capabilities.
const (
	madd7Ptx52 = `
.version 7.0
.target sm_52
.address_size 64

	// .globl	madd7

.visible .entry madd7(
	.param .u64 madd7_param_0,
	.param .u64 madd7_param_1,
	.param .f32 madd7_param_2,
	.param .u64 madd7_param_3,
	.param .f32 madd7_param_4,
	.param .u64 madd7_param_5,
	.param .f32 madd7_param_6,
	.param .u64 madd7_param_7,
	.param .f32 madd7_param_8,
	.param .u64 madd7_param_9,
	.param .f32 madd7_param_10,
	.param .u64 madd7_param_11,
	.param .f32 madd7_param_12,
	.param .u64 madd7_param_13,
	.param .f32 madd7_param_14,
	.param .u32 madd7_param_15
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<22>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<26>;


	ld.param.u64 	%rd1, [madd7_param_0];
	ld.param.u64 	%rd2, [madd7_param_1];
	ld.param.f32 	%f1, [madd7_param_2];
	ld.param.u64 	%rd3, [madd7_param_3];
	ld.param.f32 	%f2, [madd7_param_4];
	ld.param.u64 	%rd4, [madd7_param_5];
	ld.param.f32 	%f3, [madd7_param_6];
	ld.param.u64 	%rd5, [madd7_param_7];
	ld.param.f32 	%f4, [madd7_param_8];
	ld.param.u64 	%rd6, [madd7_param_9];
	ld.param.f32 	%f5, [madd7_param_10];
	ld.param.u64 	%rd7, [madd7_param_11];
	ld.param.f32 	%f6, [madd7_param_12];
	ld.param.u64 	%rd8, [madd7_param_13];
	ld.param.f32 	%f7, [madd7_param_14];
	ld.param.u32 	%r2, [madd7_param_15];
	mov.u32 	%r3, %ctaid.y;
	mov.u32 	%r4, %nctaid.x;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r4, %r3, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_2;

	cvta.to.global.u64 	%rd9, %rd2;
	mul.wide.s32 	%rd10, %r1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.nc.f32 	%f8, [%rd11];
	cvta.to.global.u64 	%rd12, %rd3;
	add.s64 	%rd13, %rd12, %rd10;
	ld.global.nc.f32 	%f9, [%rd13];
	mul.f32 	%f10, %f9, %f2;
	fma.rn.f32 	%f11, %f8, %f1, %f10;
	cvta.to.global.u64 	%rd14, %rd4;
	add.s64 	%rd15, %rd14, %rd10;
	ld.global.nc.f32 	%f12, [%rd15];
	fma.rn.f32 	%f13, %f12, %f3, %f11;
	cvta.to.global.u64 	%rd16, %rd5;
	add.s64 	%rd17, %rd16, %rd10;
	ld.global.nc.f32 	%f14, [%rd17];
	fma.rn.f32 	%f15, %f14, %f4, %f13;
	cvta.to.global.u64 	%rd18, %rd6;
	add.s64 	%rd19, %rd18, %rd10;
	ld.global.nc.f32 	%f16, [%rd19];
	fma.rn.f32 	%f17, %f16, %f5, %f15;
	cvta.to.global.u64 	%rd20, %rd7;
	add.s64 	%rd21, %rd20, %rd10;
	ld.global.nc.f32 	%f18, [%rd21];
	fma.rn.f32 	%f19, %f18, %f6, %f17;
	cvta.to.global.u64 	%rd22, %rd8;
	add.s64 	%rd23, %rd22, %rd10;
	ld.global.nc.f32 	%f20, [%rd23];
	fma.rn.f32 	%f21, %f20, %f7, %f19;
	cvta.to.global.u64 	%rd24, %rd1;
	add.s64 	%rd25, %rd24, %rd10;
	st.global.f32 	[%rd25], %f21;

BB0_2:
	ret;
}


`
)
