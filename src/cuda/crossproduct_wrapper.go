package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"sync"
	"unsafe"

	"github.com/MathieuMoalic/amumax/src/cuda/cu"
	"github.com/MathieuMoalic/amumax/src/timer"
)

// CUDA handle for crossproduct kernel
var crossproductCode cu.Function

// Stores the arguments for crossproduct kernel invocation
type crossproductArgsT struct {
	argDstx unsafe.Pointer
	argDsty unsafe.Pointer
	argDstz unsafe.Pointer
	argAx   unsafe.Pointer
	argAy   unsafe.Pointer
	argAz   unsafe.Pointer
	argBx   unsafe.Pointer
	argBy   unsafe.Pointer
	argBz   unsafe.Pointer
	argN    int
	argptr   [10]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for crossproduct kernel invocation
var crossproductArgs crossproductArgsT

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	crossproductArgs.argptr[0] = unsafe.Pointer(&crossproductArgs.argDstx)
	crossproductArgs.argptr[1] = unsafe.Pointer(&crossproductArgs.argDsty)
	crossproductArgs.argptr[2] = unsafe.Pointer(&crossproductArgs.argDstz)
	crossproductArgs.argptr[3] = unsafe.Pointer(&crossproductArgs.argAx)
	crossproductArgs.argptr[4] = unsafe.Pointer(&crossproductArgs.argAy)
	crossproductArgs.argptr[5] = unsafe.Pointer(&crossproductArgs.argAz)
	crossproductArgs.argptr[6] = unsafe.Pointer(&crossproductArgs.argBx)
	crossproductArgs.argptr[7] = unsafe.Pointer(&crossproductArgs.argBy)
	crossproductArgs.argptr[8] = unsafe.Pointer(&crossproductArgs.argBz)
	crossproductArgs.argptr[9] = unsafe.Pointer(&crossproductArgs.argN)
}

// Wrapper for crossproduct CUDA kernel, asynchronous.
func kCrossproductAsync(dstx unsafe.Pointer, dsty unsafe.Pointer, dstz unsafe.Pointer, ax unsafe.Pointer, ay unsafe.Pointer, az unsafe.Pointer, bx unsafe.Pointer, by unsafe.Pointer, bz unsafe.Pointer, N int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("crossproduct")
	}

	crossproductArgs.Lock()
	defer crossproductArgs.Unlock()

	if crossproductCode == 0 {
		crossproductCode = fatbinLoad(crossproductMap, "crossproduct")
	}

	crossproductArgs.argDstx = dstx
	crossproductArgs.argDsty = dsty
	crossproductArgs.argDstz = dstz
	crossproductArgs.argAx = ax
	crossproductArgs.argAy = ay
	crossproductArgs.argAz = az
	crossproductArgs.argBx = bx
	crossproductArgs.argBy = by
	crossproductArgs.argBz = bz
	crossproductArgs.argN = N

	args := crossproductArgs.argptr[:]
	cu.LaunchKernel(crossproductCode, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("crossproduct")
	}
}

// maps compute capability on PTX code for crossproduct kernel.
var crossproductMap = map[int]string{
	0:  "",
	52: crossproductPtx52,
}

// crossproduct PTX code for various compute capabilities.
const (
	crossproductPtx52 = `
.version 7.0
.target sm_52
.address_size 64

	// .globl	crossproduct

.visible .entry crossproduct(
	.param .u64 crossproduct_param_0,
	.param .u64 crossproduct_param_1,
	.param .u64 crossproduct_param_2,
	.param .u64 crossproduct_param_3,
	.param .u64 crossproduct_param_4,
	.param .u64 crossproduct_param_5,
	.param .u64 crossproduct_param_6,
	.param .u64 crossproduct_param_7,
	.param .u64 crossproduct_param_8,
	.param .u32 crossproduct_param_9
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<16>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<29>;


	ld.param.u64 	%rd1, [crossproduct_param_0];
	ld.param.u64 	%rd2, [crossproduct_param_1];
	ld.param.u64 	%rd3, [crossproduct_param_2];
	ld.param.u64 	%rd4, [crossproduct_param_3];
	ld.param.u64 	%rd5, [crossproduct_param_4];
	ld.param.u64 	%rd6, [crossproduct_param_5];
	ld.param.u64 	%rd7, [crossproduct_param_6];
	ld.param.u64 	%rd8, [crossproduct_param_7];
	ld.param.u64 	%rd9, [crossproduct_param_8];
	ld.param.u32 	%r2, [crossproduct_param_9];
	mov.u32 	%r3, %ctaid.y;
	mov.u32 	%r4, %nctaid.x;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r4, %r3, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_2;

	cvta.to.global.u64 	%rd10, %rd4;
	mul.wide.s32 	%rd11, %r1, 4;
	add.s64 	%rd12, %rd10, %rd11;
	cvta.to.global.u64 	%rd13, %rd5;
	add.s64 	%rd14, %rd13, %rd11;
	cvta.to.global.u64 	%rd15, %rd6;
	add.s64 	%rd16, %rd15, %rd11;
	cvta.to.global.u64 	%rd17, %rd7;
	add.s64 	%rd18, %rd17, %rd11;
	cvta.to.global.u64 	%rd19, %rd8;
	add.s64 	%rd20, %rd19, %rd11;
	cvta.to.global.u64 	%rd21, %rd9;
	add.s64 	%rd22, %rd21, %rd11;
	ld.global.nc.f32 	%f1, [%rd22];
	ld.global.nc.f32 	%f2, [%rd14];
	mul.f32 	%f3, %f2, %f1;
	ld.global.nc.f32 	%f4, [%rd20];
	ld.global.nc.f32 	%f5, [%rd16];
	mul.f32 	%f6, %f5, %f4;
	sub.f32 	%f7, %f3, %f6;
	ld.global.nc.f32 	%f8, [%rd18];
	mul.f32 	%f9, %f5, %f8;
	ld.global.nc.f32 	%f10, [%rd12];
	mul.f32 	%f11, %f10, %f1;
	sub.f32 	%f12, %f9, %f11;
	mul.f32 	%f13, %f10, %f4;
	mul.f32 	%f14, %f2, %f8;
	sub.f32 	%f15, %f13, %f14;
	cvta.to.global.u64 	%rd23, %rd1;
	add.s64 	%rd24, %rd23, %rd11;
	st.global.f32 	[%rd24], %f7;
	cvta.to.global.u64 	%rd25, %rd2;
	add.s64 	%rd26, %rd25, %rd11;
	st.global.f32 	[%rd26], %f12;
	cvta.to.global.u64 	%rd27, %rd3;
	add.s64 	%rd28, %rd27, %rd11;
	st.global.f32 	[%rd28], %f15;

BB0_2:
	ret;
}


`
)
