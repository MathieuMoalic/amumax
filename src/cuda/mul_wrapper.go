package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"sync"
	"unsafe"

	"github.com/MathieuMoalic/amumax/src/cuda/cu"
	"github.com/MathieuMoalic/amumax/src/timer"
)

// CUDA handle for mul kernel
var mulCode cu.Function

// Stores the arguments for mul kernel invocation
type mulArgsT struct {
	argDst unsafe.Pointer
	argA   unsafe.Pointer
	argB   unsafe.Pointer
	argN   int
	argptr  [4]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for mul kernel invocation
var mulArgs mulArgsT

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	mulArgs.argptr[0] = unsafe.Pointer(&mulArgs.argDst)
	mulArgs.argptr[1] = unsafe.Pointer(&mulArgs.argA)
	mulArgs.argptr[2] = unsafe.Pointer(&mulArgs.argB)
	mulArgs.argptr[3] = unsafe.Pointer(&mulArgs.argN)
}

// Wrapper for mul CUDA kernel, asynchronous.
func kMulAsync(dst unsafe.Pointer, a unsafe.Pointer, b unsafe.Pointer, N int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("mul")
	}

	mulArgs.Lock()
	defer mulArgs.Unlock()

	if mulCode == 0 {
		mulCode = fatbinLoad(mulMap, "mul")
	}

	mulArgs.argDst = dst
	mulArgs.argA = a
	mulArgs.argB = b
	mulArgs.argN = N

	args := mulArgs.argptr[:]
	cu.LaunchKernel(mulCode, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("mul")
	}
}

// maps compute capability on PTX code for mul kernel.
var mulMap = map[int]string{
	0:  "",
	52: mulPtx52,
}

// mul PTX code for various compute capabilities.
const (
	mulPtx52 = `
.version 7.0
.target sm_52
.address_size 64

	// .globl	mul

.visible .entry mul(
	.param .u64 mul_param_0,
	.param .u64 mul_param_1,
	.param .u64 mul_param_2,
	.param .u32 mul_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [mul_param_0];
	ld.param.u64 	%rd2, [mul_param_1];
	ld.param.u64 	%rd3, [mul_param_2];
	ld.param.u32 	%r2, [mul_param_3];
	mov.u32 	%r3, %ctaid.y;
	mov.u32 	%r4, %nctaid.x;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r4, %r3, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_2;

	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd3;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.nc.f32 	%f1, [%rd8];
	ld.global.nc.f32 	%f2, [%rd6];
	mul.f32 	%f3, %f2, %f1;
	cvta.to.global.u64 	%rd9, %rd1;
	add.s64 	%rd10, %rd9, %rd5;
	st.global.f32 	[%rd10], %f3;

BB0_2:
	ret;
}


`
)
