package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"sync"
	"unsafe"

	"github.com/MathieuMoalic/amumax/src/cuda/cu"
	"github.com/MathieuMoalic/amumax/src/timer"
)

// CUDA handle for madd6 kernel
var madd6Code cu.Function

// Stores the arguments for madd6 kernel invocation
type madd6ArgsT struct {
	argDst  unsafe.Pointer
	argSrc1 unsafe.Pointer
	argFac1 float32
	argSrc2 unsafe.Pointer
	argFac2 float32
	argSrc3 unsafe.Pointer
	argFac3 float32
	argSrc4 unsafe.Pointer
	argFac4 float32
	argSrc5 unsafe.Pointer
	argFac5 float32
	argSrc6 unsafe.Pointer
	argFac6 float32
	argN    int
	argptr  [14]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for madd6 kernel invocation
var madd6Args madd6ArgsT

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	madd6Args.argptr[0] = unsafe.Pointer(&madd6Args.argDst)
	madd6Args.argptr[1] = unsafe.Pointer(&madd6Args.argSrc1)
	madd6Args.argptr[2] = unsafe.Pointer(&madd6Args.argFac1)
	madd6Args.argptr[3] = unsafe.Pointer(&madd6Args.argSrc2)
	madd6Args.argptr[4] = unsafe.Pointer(&madd6Args.argFac2)
	madd6Args.argptr[5] = unsafe.Pointer(&madd6Args.argSrc3)
	madd6Args.argptr[6] = unsafe.Pointer(&madd6Args.argFac3)
	madd6Args.argptr[7] = unsafe.Pointer(&madd6Args.argSrc4)
	madd6Args.argptr[8] = unsafe.Pointer(&madd6Args.argFac4)
	madd6Args.argptr[9] = unsafe.Pointer(&madd6Args.argSrc5)
	madd6Args.argptr[10] = unsafe.Pointer(&madd6Args.argFac5)
	madd6Args.argptr[11] = unsafe.Pointer(&madd6Args.argSrc6)
	madd6Args.argptr[12] = unsafe.Pointer(&madd6Args.argFac6)
	madd6Args.argptr[13] = unsafe.Pointer(&madd6Args.argN)
}

// Wrapper for madd6 CUDA kernel, asynchronous.
func kMadd6Async(dst unsafe.Pointer, src1 unsafe.Pointer, fac1 float32, src2 unsafe.Pointer, fac2 float32, src3 unsafe.Pointer, fac3 float32, src4 unsafe.Pointer, fac4 float32, src5 unsafe.Pointer, fac5 float32, src6 unsafe.Pointer, fac6 float32, N int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("madd6")
	}

	madd6Args.Lock()
	defer madd6Args.Unlock()

	if madd6Code == 0 {
		madd6Code = fatbinLoad(madd6Map, "madd6")
	}

	madd6Args.argDst = dst
	madd6Args.argSrc1 = src1
	madd6Args.argFac1 = fac1
	madd6Args.argSrc2 = src2
	madd6Args.argFac2 = fac2
	madd6Args.argSrc3 = src3
	madd6Args.argFac3 = fac3
	madd6Args.argSrc4 = src4
	madd6Args.argFac4 = fac4
	madd6Args.argSrc5 = src5
	madd6Args.argFac5 = fac5
	madd6Args.argSrc6 = src6
	madd6Args.argFac6 = fac6
	madd6Args.argN = N

	args := madd6Args.argptr[:]
	cu.LaunchKernel(madd6Code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("madd6")
	}
}

// maps compute capability on PTX code for madd6 kernel.
var madd6Map = map[int]string{
	0:  "",
	52: madd6Ptx52,
}

// madd6 PTX code for various compute capabilities.
const (
	madd6Ptx52 = `
.version 7.0
.target sm_52
.address_size 64

	// .globl	madd6

.visible .entry madd6(
	.param .u64 madd6_param_0,
	.param .u64 madd6_param_1,
	.param .f32 madd6_param_2,
	.param .u64 madd6_param_3,
	.param .f32 madd6_param_4,
	.param .u64 madd6_param_5,
	.param .f32 madd6_param_6,
	.param .u64 madd6_param_7,
	.param .f32 madd6_param_8,
	.param .u64 madd6_param_9,
	.param .f32 madd6_param_10,
	.param .u64 madd6_param_11,
	.param .f32 madd6_param_12,
	.param .u32 madd6_param_13
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<19>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<23>;


	ld.param.u64 	%rd1, [madd6_param_0];
	ld.param.u64 	%rd2, [madd6_param_1];
	ld.param.f32 	%f1, [madd6_param_2];
	ld.param.u64 	%rd3, [madd6_param_3];
	ld.param.f32 	%f2, [madd6_param_4];
	ld.param.u64 	%rd4, [madd6_param_5];
	ld.param.f32 	%f3, [madd6_param_6];
	ld.param.u64 	%rd5, [madd6_param_7];
	ld.param.f32 	%f4, [madd6_param_8];
	ld.param.u64 	%rd6, [madd6_param_9];
	ld.param.f32 	%f5, [madd6_param_10];
	ld.param.u64 	%rd7, [madd6_param_11];
	ld.param.f32 	%f6, [madd6_param_12];
	ld.param.u32 	%r2, [madd6_param_13];
	mov.u32 	%r3, %ctaid.y;
	mov.u32 	%r4, %nctaid.x;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r4, %r3, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_2;

	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.s32 	%rd9, %r1, 4;
	add.s64 	%rd10, %rd8, %rd9;
	ld.global.nc.f32 	%f7, [%rd10];
	cvta.to.global.u64 	%rd11, %rd3;
	add.s64 	%rd12, %rd11, %rd9;
	ld.global.nc.f32 	%f8, [%rd12];
	mul.f32 	%f9, %f8, %f2;
	fma.rn.f32 	%f10, %f7, %f1, %f9;
	cvta.to.global.u64 	%rd13, %rd4;
	add.s64 	%rd14, %rd13, %rd9;
	ld.global.nc.f32 	%f11, [%rd14];
	fma.rn.f32 	%f12, %f11, %f3, %f10;
	cvta.to.global.u64 	%rd15, %rd5;
	add.s64 	%rd16, %rd15, %rd9;
	ld.global.nc.f32 	%f13, [%rd16];
	fma.rn.f32 	%f14, %f13, %f4, %f12;
	cvta.to.global.u64 	%rd17, %rd6;
	add.s64 	%rd18, %rd17, %rd9;
	ld.global.nc.f32 	%f15, [%rd18];
	fma.rn.f32 	%f16, %f15, %f5, %f14;
	cvta.to.global.u64 	%rd19, %rd7;
	add.s64 	%rd20, %rd19, %rd9;
	ld.global.nc.f32 	%f17, [%rd20];
	fma.rn.f32 	%f18, %f17, %f6, %f16;
	cvta.to.global.u64 	%rd21, %rd1;
	add.s64 	%rd22, %rd21, %rd9;
	st.global.f32 	[%rd22], %f18;

BB0_2:
	ret;
}


`
)
