package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"sync"
	"unsafe"

	"github.com/MathieuMoalic/amumax/src/cuda/cu"
	"github.com/MathieuMoalic/amumax/src/timer"
)

// CUDA handle for addslonczewskitorque2 kernel
var addslonczewskitorque2Code cu.Function

// Stores the arguments for addslonczewskitorque2 kernel invocation
type addslonczewskitorque2ArgsT struct {
	argTx                unsafe.Pointer
	argTy                unsafe.Pointer
	argTz                unsafe.Pointer
	argMx                unsafe.Pointer
	argMy                unsafe.Pointer
	argMz                unsafe.Pointer
	argMs               unsafe.Pointer
	argMsMul            float32
	argJz               unsafe.Pointer
	argJzMul            float32
	argPx               unsafe.Pointer
	argPxMul            float32
	argPy               unsafe.Pointer
	argPyMul            float32
	argPz               unsafe.Pointer
	argPzMul            float32
	argAlpha            unsafe.Pointer
	argAlphaMul         float32
	argPol              unsafe.Pointer
	argPolMul           float32
	argLambda           unsafe.Pointer
	argLambdaMul        float32
	argEpsPrime         unsafe.Pointer
	argEpsPrimeMul      float32
	argThickness        unsafe.Pointer
	argThicknessMul     float32
	argMeshThickness     float32
	argFreeLayerPosition float32
	argN                 int
	argptr                [29]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for addslonczewskitorque2 kernel invocation
var addslonczewskitorque2Args addslonczewskitorque2ArgsT

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	addslonczewskitorque2Args.argptr[0] = unsafe.Pointer(&addslonczewskitorque2Args.argTx)
	addslonczewskitorque2Args.argptr[1] = unsafe.Pointer(&addslonczewskitorque2Args.argTy)
	addslonczewskitorque2Args.argptr[2] = unsafe.Pointer(&addslonczewskitorque2Args.argTz)
	addslonczewskitorque2Args.argptr[3] = unsafe.Pointer(&addslonczewskitorque2Args.argMx)
	addslonczewskitorque2Args.argptr[4] = unsafe.Pointer(&addslonczewskitorque2Args.argMy)
	addslonczewskitorque2Args.argptr[5] = unsafe.Pointer(&addslonczewskitorque2Args.argMz)
	addslonczewskitorque2Args.argptr[6] = unsafe.Pointer(&addslonczewskitorque2Args.argMs)
	addslonczewskitorque2Args.argptr[7] = unsafe.Pointer(&addslonczewskitorque2Args.argMsMul)
	addslonczewskitorque2Args.argptr[8] = unsafe.Pointer(&addslonczewskitorque2Args.argJz)
	addslonczewskitorque2Args.argptr[9] = unsafe.Pointer(&addslonczewskitorque2Args.argJzMul)
	addslonczewskitorque2Args.argptr[10] = unsafe.Pointer(&addslonczewskitorque2Args.argPx)
	addslonczewskitorque2Args.argptr[11] = unsafe.Pointer(&addslonczewskitorque2Args.argPxMul)
	addslonczewskitorque2Args.argptr[12] = unsafe.Pointer(&addslonczewskitorque2Args.argPy)
	addslonczewskitorque2Args.argptr[13] = unsafe.Pointer(&addslonczewskitorque2Args.argPyMul)
	addslonczewskitorque2Args.argptr[14] = unsafe.Pointer(&addslonczewskitorque2Args.argPz)
	addslonczewskitorque2Args.argptr[15] = unsafe.Pointer(&addslonczewskitorque2Args.argPzMul)
	addslonczewskitorque2Args.argptr[16] = unsafe.Pointer(&addslonczewskitorque2Args.argAlpha)
	addslonczewskitorque2Args.argptr[17] = unsafe.Pointer(&addslonczewskitorque2Args.argAlphaMul)
	addslonczewskitorque2Args.argptr[18] = unsafe.Pointer(&addslonczewskitorque2Args.argPol)
	addslonczewskitorque2Args.argptr[19] = unsafe.Pointer(&addslonczewskitorque2Args.argPolMul)
	addslonczewskitorque2Args.argptr[20] = unsafe.Pointer(&addslonczewskitorque2Args.argLambda)
	addslonczewskitorque2Args.argptr[21] = unsafe.Pointer(&addslonczewskitorque2Args.argLambdaMul)
	addslonczewskitorque2Args.argptr[22] = unsafe.Pointer(&addslonczewskitorque2Args.argEpsPrime)
	addslonczewskitorque2Args.argptr[23] = unsafe.Pointer(&addslonczewskitorque2Args.argEpsPrimeMul)
	addslonczewskitorque2Args.argptr[24] = unsafe.Pointer(&addslonczewskitorque2Args.argThickness)
	addslonczewskitorque2Args.argptr[25] = unsafe.Pointer(&addslonczewskitorque2Args.argThicknessMul)
	addslonczewskitorque2Args.argptr[26] = unsafe.Pointer(&addslonczewskitorque2Args.argMeshThickness)
	addslonczewskitorque2Args.argptr[27] = unsafe.Pointer(&addslonczewskitorque2Args.argFreeLayerPosition)
	addslonczewskitorque2Args.argptr[28] = unsafe.Pointer(&addslonczewskitorque2Args.argN)
}

// Wrapper for addslonczewskitorque2 CUDA kernel, asynchronous.
func kAddslonczewskitorque2Async(tx unsafe.Pointer, ty unsafe.Pointer, tz unsafe.Pointer, mx unsafe.Pointer, my unsafe.Pointer, mz unsafe.Pointer, Ms_ unsafe.Pointer, MsMul float32, jz_ unsafe.Pointer, jzMul float32, px_ unsafe.Pointer, pxMul float32, py_ unsafe.Pointer, pyMul float32, pz_ unsafe.Pointer, pzMul float32, alpha_ unsafe.Pointer, alphaMul float32, pol_ unsafe.Pointer, polMul float32, lambda_ unsafe.Pointer, lambdaMul float32, epsPrime_ unsafe.Pointer, epsPrimeMul float32, thickness_ unsafe.Pointer, thicknessMul float32, meshThickness float32, freeLayerPosition float32, N int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("addslonczewskitorque2")
	}

	addslonczewskitorque2Args.Lock()
	defer addslonczewskitorque2Args.Unlock()

	if addslonczewskitorque2Code == 0 {
		addslonczewskitorque2Code = fatbinLoad(addslonczewskitorque2Map, "addslonczewskitorque2")
	}

	addslonczewskitorque2Args.argTx = tx
	addslonczewskitorque2Args.argTy = ty
	addslonczewskitorque2Args.argTz = tz
	addslonczewskitorque2Args.argMx = mx
	addslonczewskitorque2Args.argMy = my
	addslonczewskitorque2Args.argMz = mz
	addslonczewskitorque2Args.argMs = Ms_
	addslonczewskitorque2Args.argMsMul = MsMul
	addslonczewskitorque2Args.argJz = jz_
	addslonczewskitorque2Args.argJzMul = jzMul
	addslonczewskitorque2Args.argPx = px_
	addslonczewskitorque2Args.argPxMul = pxMul
	addslonczewskitorque2Args.argPy = py_
	addslonczewskitorque2Args.argPyMul = pyMul
	addslonczewskitorque2Args.argPz = pz_
	addslonczewskitorque2Args.argPzMul = pzMul
	addslonczewskitorque2Args.argAlpha = alpha_
	addslonczewskitorque2Args.argAlphaMul = alphaMul
	addslonczewskitorque2Args.argPol = pol_
	addslonczewskitorque2Args.argPolMul = polMul
	addslonczewskitorque2Args.argLambda = lambda_
	addslonczewskitorque2Args.argLambdaMul = lambdaMul
	addslonczewskitorque2Args.argEpsPrime = epsPrime_
	addslonczewskitorque2Args.argEpsPrimeMul = epsPrimeMul
	addslonczewskitorque2Args.argThickness = thickness_
	addslonczewskitorque2Args.argThicknessMul = thicknessMul
	addslonczewskitorque2Args.argMeshThickness = meshThickness
	addslonczewskitorque2Args.argFreeLayerPosition = freeLayerPosition
	addslonczewskitorque2Args.argN = N

	args := addslonczewskitorque2Args.argptr[:]
	cu.LaunchKernel(addslonczewskitorque2Code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("addslonczewskitorque2")
	}
}

// maps compute capability on PTX code for addslonczewskitorque2 kernel.
var addslonczewskitorque2Map = map[int]string{
	0:  "",
	52: addslonczewskitorque2Ptx52,
}

// addslonczewskitorque2 PTX code for various compute capabilities.
const (
	addslonczewskitorque2Ptx52 = `
.version 7.0
.target sm_52
.address_size 64

	// .globl	addslonczewskitorque2

.visible .entry addslonczewskitorque2(
	.param .u64 addslonczewskitorque2_param_0,
	.param .u64 addslonczewskitorque2_param_1,
	.param .u64 addslonczewskitorque2_param_2,
	.param .u64 addslonczewskitorque2_param_3,
	.param .u64 addslonczewskitorque2_param_4,
	.param .u64 addslonczewskitorque2_param_5,
	.param .u64 addslonczewskitorque2_param_6,
	.param .f32 addslonczewskitorque2_param_7,
	.param .u64 addslonczewskitorque2_param_8,
	.param .f32 addslonczewskitorque2_param_9,
	.param .u64 addslonczewskitorque2_param_10,
	.param .f32 addslonczewskitorque2_param_11,
	.param .u64 addslonczewskitorque2_param_12,
	.param .f32 addslonczewskitorque2_param_13,
	.param .u64 addslonczewskitorque2_param_14,
	.param .f32 addslonczewskitorque2_param_15,
	.param .u64 addslonczewskitorque2_param_16,
	.param .f32 addslonczewskitorque2_param_17,
	.param .u64 addslonczewskitorque2_param_18,
	.param .f32 addslonczewskitorque2_param_19,
	.param .u64 addslonczewskitorque2_param_20,
	.param .f32 addslonczewskitorque2_param_21,
	.param .u64 addslonczewskitorque2_param_22,
	.param .f32 addslonczewskitorque2_param_23,
	.param .u64 addslonczewskitorque2_param_24,
	.param .f32 addslonczewskitorque2_param_25,
	.param .f32 addslonczewskitorque2_param_26,
	.param .f32 addslonczewskitorque2_param_27,
	.param .u32 addslonczewskitorque2_param_28
)
{
	.reg .pred 	%p<17>;
	.reg .f32 	%f<120>;
	.reg .b32 	%r<86>;
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<61>;


	ld.param.u64 	%rd1, [addslonczewskitorque2_param_0];
	ld.param.u64 	%rd2, [addslonczewskitorque2_param_1];
	ld.param.u64 	%rd3, [addslonczewskitorque2_param_2];
	ld.param.u64 	%rd4, [addslonczewskitorque2_param_3];
	ld.param.u64 	%rd5, [addslonczewskitorque2_param_4];
	ld.param.u64 	%rd6, [addslonczewskitorque2_param_5];
	ld.param.u64 	%rd7, [addslonczewskitorque2_param_6];
	ld.param.f32 	%f114, [addslonczewskitorque2_param_7];
	ld.param.u64 	%rd8, [addslonczewskitorque2_param_8];
	ld.param.f32 	%f109, [addslonczewskitorque2_param_9];
	ld.param.u64 	%rd9, [addslonczewskitorque2_param_10];
	ld.param.f32 	%f110, [addslonczewskitorque2_param_11];
	ld.param.u64 	%rd10, [addslonczewskitorque2_param_12];
	ld.param.f32 	%f111, [addslonczewskitorque2_param_13];
	ld.param.u64 	%rd11, [addslonczewskitorque2_param_14];
	ld.param.f32 	%f112, [addslonczewskitorque2_param_15];
	ld.param.u64 	%rd12, [addslonczewskitorque2_param_16];
	ld.param.f32 	%f115, [addslonczewskitorque2_param_17];
	ld.param.u64 	%rd13, [addslonczewskitorque2_param_18];
	ld.param.f32 	%f116, [addslonczewskitorque2_param_19];
	ld.param.u64 	%rd14, [addslonczewskitorque2_param_20];
	ld.param.f32 	%f117, [addslonczewskitorque2_param_21];
	ld.param.u64 	%rd15, [addslonczewskitorque2_param_22];
	ld.param.f32 	%f118, [addslonczewskitorque2_param_23];
	ld.param.u64 	%rd16, [addslonczewskitorque2_param_24];
	ld.param.f32 	%f119, [addslonczewskitorque2_param_25];
	ld.param.f32 	%f40, [addslonczewskitorque2_param_26];
	ld.param.f32 	%f41, [addslonczewskitorque2_param_27];
	ld.param.u32 	%r2, [addslonczewskitorque2_param_28];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_25;

	cvta.to.global.u64 	%rd17, %rd4;
	mul.wide.s32 	%rd18, %r1, 4;
	add.s64 	%rd19, %rd17, %rd18;
	ld.global.nc.f32 	%f1, [%rd19];
	cvta.to.global.u64 	%rd20, %rd5;
	add.s64 	%rd21, %rd20, %rd18;
	ld.global.nc.f32 	%f2, [%rd21];
	cvta.to.global.u64 	%rd22, %rd6;
	add.s64 	%rd23, %rd22, %rd18;
	ld.global.nc.f32 	%f3, [%rd23];
	setp.eq.s64	%p2, %rd8, 0;
	@%p2 bra 	BB0_3;

	cvta.to.global.u64 	%rd24, %rd8;
	add.s64 	%rd26, %rd24, %rd18;
	ld.global.nc.f32 	%f42, [%rd26];
	mul.f32 	%f109, %f42, %f109;

BB0_3:
	setp.eq.s64	%p3, %rd9, 0;
	@%p3 bra 	BB0_5;

	cvta.to.global.u64 	%rd27, %rd9;
	add.s64 	%rd29, %rd27, %rd18;
	ld.global.nc.f32 	%f43, [%rd29];
	mul.f32 	%f110, %f43, %f110;

BB0_5:
	setp.eq.s64	%p4, %rd10, 0;
	@%p4 bra 	BB0_7;

	cvta.to.global.u64 	%rd30, %rd10;
	add.s64 	%rd32, %rd30, %rd18;
	ld.global.nc.f32 	%f44, [%rd32];
	mul.f32 	%f111, %f44, %f111;

BB0_7:
	setp.eq.s64	%p5, %rd11, 0;
	@%p5 bra 	BB0_9;

	cvta.to.global.u64 	%rd33, %rd11;
	add.s64 	%rd35, %rd33, %rd18;
	ld.global.nc.f32 	%f45, [%rd35];
	mul.f32 	%f112, %f45, %f112;

BB0_9:
	mul.f32 	%f47, %f111, %f111;
	fma.rn.f32 	%f48, %f110, %f110, %f47;
	fma.rn.f32 	%f49, %f112, %f112, %f48;
	sqrt.rn.f32 	%f12, %f49;
	mov.f32 	%f113, 0f00000000;
	setp.eq.f32	%p6, %f12, 0f00000000;
	@%p6 bra 	BB0_11;

	rcp.rn.f32 	%f113, %f12;

BB0_11:
	mul.f32 	%f15, %f110, %f113;
	mul.f32 	%f16, %f111, %f113;
	mul.f32 	%f17, %f112, %f113;
	setp.eq.s64	%p7, %rd7, 0;
	@%p7 bra 	BB0_13;

	cvta.to.global.u64 	%rd36, %rd7;
	add.s64 	%rd38, %rd36, %rd18;
	ld.global.nc.f32 	%f50, [%rd38];
	mul.f32 	%f114, %f50, %f114;

BB0_13:
	setp.eq.s64	%p8, %rd12, 0;
	@%p8 bra 	BB0_15;

	cvta.to.global.u64 	%rd39, %rd12;
	add.s64 	%rd41, %rd39, %rd18;
	ld.global.nc.f32 	%f51, [%rd41];
	mul.f32 	%f115, %f51, %f115;

BB0_15:
	setp.eq.s64	%p9, %rd13, 0;
	@%p9 bra 	BB0_17;

	cvta.to.global.u64 	%rd42, %rd13;
	add.s64 	%rd44, %rd42, %rd18;
	ld.global.nc.f32 	%f52, [%rd44];
	mul.f32 	%f116, %f52, %f116;

BB0_17:
	setp.eq.s64	%p10, %rd14, 0;
	@%p10 bra 	BB0_19;

	cvta.to.global.u64 	%rd45, %rd14;
	add.s64 	%rd47, %rd45, %rd18;
	ld.global.nc.f32 	%f53, [%rd47];
	mul.f32 	%f117, %f53, %f117;

BB0_19:
	setp.eq.s64	%p11, %rd15, 0;
	@%p11 bra 	BB0_21;

	cvta.to.global.u64 	%rd48, %rd15;
	add.s64 	%rd50, %rd48, %rd18;
	ld.global.nc.f32 	%f54, [%rd50];
	mul.f32 	%f118, %f54, %f118;

BB0_21:
	setp.eq.s64	%p12, %rd16, 0;
	@%p12 bra 	BB0_23;

	cvta.to.global.u64 	%rd51, %rd16;
	add.s64 	%rd53, %rd51, %rd18;
	ld.global.nc.f32 	%f55, [%rd53];
	mul.f32 	%f119, %f55, %f119;

BB0_23:
	setp.eq.f32	%p13, %f114, 0f00000000;
	setp.eq.f32	%p14, %f109, 0f00000000;
	or.pred  	%p15, %p14, %p13;
	@%p15 bra 	BB0_25;

	setp.eq.f32	%p16, %f119, 0f00000000;
	selp.f32	%f56, %f40, %f119, %p16;
	mul.f32 	%f57, %f56, %f41;
	mul.f32 	%f58, %f114, %f57;
	div.rn.f32 	%f59, %f109, %f58;
	cvt.f64.f32	%fd1, %f59;
	mul.f64 	%fd2, %fd1, 0d3CC7B6EF14E9250C;
	cvt.rn.f32.f64	%f60, %fd2;
	mul.f32 	%f61, %f117, %f117;
	mul.f32 	%f62, %f116, %f61;
	add.f32 	%f63, %f61, 0f3F800000;
	add.f32 	%f64, %f61, 0fBF800000;
	mul.f32 	%f65, %f2, %f16;
	fma.rn.f32 	%f66, %f1, %f15, %f65;
	fma.rn.f32 	%f67, %f3, %f17, %f66;
	fma.rn.f32 	%f68, %f67, %f64, %f63;
	div.rn.f32 	%f69, %f62, %f68;
	mul.f32 	%f70, %f69, %f60;
	mul.f32 	%f71, %f118, %f60;
	fma.rn.f32 	%f72, %f115, %f115, 0f3F800000;
	rcp.rn.f32 	%f73, %f72;
	fma.rn.f32 	%f74, %f115, %f71, %f70;
	mul.f32 	%f75, %f73, %f74;
	mul.f32 	%f76, %f115, %f70;
	sub.f32 	%f77, %f71, %f76;
	mul.f32 	%f78, %f73, %f77;
	mul.f32 	%f79, %f2, %f17;
	mul.f32 	%f80, %f3, %f16;
	sub.f32 	%f81, %f80, %f79;
	mul.f32 	%f82, %f3, %f15;
	mul.f32 	%f83, %f1, %f17;
	sub.f32 	%f84, %f83, %f82;
	mul.f32 	%f85, %f1, %f16;
	mul.f32 	%f86, %f2, %f15;
	sub.f32 	%f87, %f86, %f85;
	mul.f32 	%f88, %f2, %f87;
	mul.f32 	%f89, %f3, %f84;
	sub.f32 	%f90, %f88, %f89;
	mul.f32 	%f91, %f3, %f81;
	mul.f32 	%f92, %f1, %f87;
	sub.f32 	%f93, %f91, %f92;
	mul.f32 	%f94, %f1, %f84;
	mul.f32 	%f95, %f2, %f81;
	sub.f32 	%f96, %f94, %f95;
	mul.f32 	%f97, %f81, %f78;
	fma.rn.f32 	%f98, %f90, %f75, %f97;
	cvta.to.global.u64 	%rd54, %rd1;
	add.s64 	%rd56, %rd54, %rd18;
	ld.global.f32 	%f99, [%rd56];
	add.f32 	%f100, %f99, %f98;
	st.global.f32 	[%rd56], %f100;
	mul.f32 	%f101, %f84, %f78;
	fma.rn.f32 	%f102, %f93, %f75, %f101;
	cvta.to.global.u64 	%rd57, %rd2;
	add.s64 	%rd58, %rd57, %rd18;
	ld.global.f32 	%f103, [%rd58];
	add.f32 	%f104, %f103, %f102;
	st.global.f32 	[%rd58], %f104;
	mul.f32 	%f105, %f87, %f78;
	fma.rn.f32 	%f106, %f96, %f75, %f105;
	cvta.to.global.u64 	%rd59, %rd3;
	add.s64 	%rd60, %rd59, %rd18;
	ld.global.f32 	%f107, [%rd60];
	add.f32 	%f108, %f107, %f106;
	st.global.f32 	[%rd60], %f108;

BB0_25:
	ret;
}


`
)
