package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"sync"
	"unsafe"

	"github.com/MathieuMoalic/amumax/src/cuda/cu"
	"github.com/MathieuMoalic/amumax/src/timer"
)

// CUDA handle for copyunpad kernel
var copyunpadCode cu.Function

// Stores the arguments for copyunpad kernel invocation
type copyunpadArgsT struct {
	argDst unsafe.Pointer
	argDx  int
	argDy  int
	argDz  int
	argSrc unsafe.Pointer
	argSx  int
	argSy  int
	argSz  int
	argptr  [8]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for copyunpad kernel invocation
var copyunpadArgs copyunpadArgsT

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	copyunpadArgs.argptr[0] = unsafe.Pointer(&copyunpadArgs.argDst)
	copyunpadArgs.argptr[1] = unsafe.Pointer(&copyunpadArgs.argDx)
	copyunpadArgs.argptr[2] = unsafe.Pointer(&copyunpadArgs.argDy)
	copyunpadArgs.argptr[3] = unsafe.Pointer(&copyunpadArgs.argDz)
	copyunpadArgs.argptr[4] = unsafe.Pointer(&copyunpadArgs.argSrc)
	copyunpadArgs.argptr[5] = unsafe.Pointer(&copyunpadArgs.argSx)
	copyunpadArgs.argptr[6] = unsafe.Pointer(&copyunpadArgs.argSy)
	copyunpadArgs.argptr[7] = unsafe.Pointer(&copyunpadArgs.argSz)
}

// Wrapper for copyunpad CUDA kernel, asynchronous.
func kCopyunpadAsync(dst unsafe.Pointer, Dx int, Dy int, Dz int, src unsafe.Pointer, Sx int, Sy int, Sz int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("copyunpad")
	}

	copyunpadArgs.Lock()
	defer copyunpadArgs.Unlock()

	if copyunpadCode == 0 {
		copyunpadCode = fatbinLoad(copyunpadMap, "copyunpad")
	}

	copyunpadArgs.argDst = dst
	copyunpadArgs.argDx = Dx
	copyunpadArgs.argDy = Dy
	copyunpadArgs.argDz = Dz
	copyunpadArgs.argSrc = src
	copyunpadArgs.argSx = Sx
	copyunpadArgs.argSy = Sy
	copyunpadArgs.argSz = Sz

	args := copyunpadArgs.argptr[:]
	cu.LaunchKernel(copyunpadCode, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("copyunpad")
	}
}

// maps compute capability on PTX code for copyunpad kernel.
var copyunpadMap = map[int]string{
	0:  "",
	52: copyunpadPtx52,
}

// copyunpad PTX code for various compute capabilities.
const (
	copyunpadPtx52 = `
.version 7.0
.target sm_52
.address_size 64

	// .globl	copyunpad

.visible .entry copyunpad(
	.param .u64 copyunpad_param_0,
	.param .u32 copyunpad_param_1,
	.param .u32 copyunpad_param_2,
	.param .u32 copyunpad_param_3,
	.param .u64 copyunpad_param_4,
	.param .u32 copyunpad_param_5,
	.param .u32 copyunpad_param_6,
	.param .u32 copyunpad_param_7
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [copyunpad_param_0];
	ld.param.u32 	%r4, [copyunpad_param_1];
	ld.param.u32 	%r5, [copyunpad_param_2];
	ld.param.u32 	%r8, [copyunpad_param_3];
	ld.param.u64 	%rd2, [copyunpad_param_4];
	ld.param.u32 	%r6, [copyunpad_param_5];
	ld.param.u32 	%r7, [copyunpad_param_6];
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %tid.x;
	mad.lo.s32 	%r1, %r10, %r9, %r11;
	mov.u32 	%r12, %ntid.y;
	mov.u32 	%r13, %ctaid.y;
	mov.u32 	%r14, %tid.y;
	mad.lo.s32 	%r2, %r12, %r13, %r14;
	mov.u32 	%r15, %ntid.z;
	mov.u32 	%r16, %ctaid.z;
	mov.u32 	%r17, %tid.z;
	mad.lo.s32 	%r3, %r15, %r16, %r17;
	setp.lt.s32	%p1, %r1, %r4;
	setp.lt.s32	%p2, %r2, %r5;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32	%p4, %r3, %r8;
	and.pred  	%p5, %p3, %p4;
	@!%p5 bra 	BB0_2;
	bra.uni 	BB0_1;

BB0_1:
	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r18, %r3, %r7, %r2;
	mad.lo.s32 	%r19, %r18, %r6, %r1;
	mul.wide.s32 	%rd4, %r19, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	mad.lo.s32 	%r20, %r3, %r5, %r2;
	mad.lo.s32 	%r21, %r20, %r4, %r1;
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r21, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

BB0_2:
	ret;
}


`
)
