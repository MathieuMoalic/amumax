package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"sync"
	"unsafe"

	"github.com/MathieuMoalic/amumax/src/cuda/cu"
	"github.com/MathieuMoalic/amumax/src/timer"
)

// CUDA handle for shifty kernel
var shiftyCode cu.Function

// Stores the arguments for shifty kernel invocation
type shiftyArgsT struct {
	argDst    unsafe.Pointer
	argSrc    unsafe.Pointer
	argNx     int
	argNy     int
	argNz     int
	argShy    int
	argClampL float32
	argClampR float32
	argptr     [8]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for shifty kernel invocation
var shiftyArgs shiftyArgsT

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	shiftyArgs.argptr[0] = unsafe.Pointer(&shiftyArgs.argDst)
	shiftyArgs.argptr[1] = unsafe.Pointer(&shiftyArgs.argSrc)
	shiftyArgs.argptr[2] = unsafe.Pointer(&shiftyArgs.argNx)
	shiftyArgs.argptr[3] = unsafe.Pointer(&shiftyArgs.argNy)
	shiftyArgs.argptr[4] = unsafe.Pointer(&shiftyArgs.argNz)
	shiftyArgs.argptr[5] = unsafe.Pointer(&shiftyArgs.argShy)
	shiftyArgs.argptr[6] = unsafe.Pointer(&shiftyArgs.argClampL)
	shiftyArgs.argptr[7] = unsafe.Pointer(&shiftyArgs.argClampR)
}

// Wrapper for shifty CUDA kernel, asynchronous.
func kShiftyAsync(dst unsafe.Pointer, src unsafe.Pointer, Nx int, Ny int, Nz int, shy int, clampL float32, clampR float32, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("shifty")
	}

	shiftyArgs.Lock()
	defer shiftyArgs.Unlock()

	if shiftyCode == 0 {
		shiftyCode = fatbinLoad(shiftyMap, "shifty")
	}

	shiftyArgs.argDst = dst
	shiftyArgs.argSrc = src
	shiftyArgs.argNx = Nx
	shiftyArgs.argNy = Ny
	shiftyArgs.argNz = Nz
	shiftyArgs.argShy = shy
	shiftyArgs.argClampL = clampL
	shiftyArgs.argClampR = clampR

	args := shiftyArgs.argptr[:]
	cu.LaunchKernel(shiftyCode, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("shifty")
	}
}

// maps compute capability on PTX code for shifty kernel.
var shiftyMap = map[int]string{
	0:  "",
	52: shiftyPtx52,
}

// shifty PTX code for various compute capabilities.
const (
	shiftyPtx52 = `
.version 7.0
.target sm_52
.address_size 64

	// .globl	shifty

.visible .entry shifty(
	.param .u64 shifty_param_0,
	.param .u64 shifty_param_1,
	.param .u32 shifty_param_2,
	.param .u32 shifty_param_3,
	.param .u32 shifty_param_4,
	.param .u32 shifty_param_5,
	.param .f32 shifty_param_6,
	.param .f32 shifty_param_7
)
{
	.reg .pred 	%p<8>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [shifty_param_0];
	ld.param.u64 	%rd2, [shifty_param_1];
	ld.param.u32 	%r5, [shifty_param_2];
	ld.param.u32 	%r6, [shifty_param_3];
	ld.param.u32 	%r8, [shifty_param_4];
	ld.param.u32 	%r7, [shifty_param_5];
	ld.param.f32 	%f5, [shifty_param_6];
	ld.param.f32 	%f4, [shifty_param_7];
	mov.u32 	%r9, %ntid.x;
	mov.u32 	%r10, %ctaid.x;
	mov.u32 	%r11, %tid.x;
	mad.lo.s32 	%r1, %r9, %r10, %r11;
	mov.u32 	%r12, %ntid.y;
	mov.u32 	%r13, %ctaid.y;
	mov.u32 	%r14, %tid.y;
	mad.lo.s32 	%r2, %r12, %r13, %r14;
	mov.u32 	%r15, %ntid.z;
	mov.u32 	%r16, %ctaid.z;
	mov.u32 	%r17, %tid.z;
	mad.lo.s32 	%r3, %r15, %r16, %r17;
	setp.lt.s32	%p1, %r1, %r5;
	setp.lt.s32	%p2, %r2, %r6;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32	%p4, %r3, %r8;
	and.pred  	%p5, %p3, %p4;
	@!%p5 bra 	BB0_5;
	bra.uni 	BB0_1;

BB0_1:
	sub.s32 	%r4, %r2, %r7;
	setp.lt.s32	%p6, %r4, 0;
	@%p6 bra 	BB0_4;

	setp.ge.s32	%p7, %r4, %r6;
	mov.f32 	%f5, %f4;
	@%p7 bra 	BB0_4;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r18, %r3, %r6, %r4;
	mad.lo.s32 	%r19, %r18, %r5, %r1;
	mul.wide.s32 	%rd4, %r19, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f5, [%rd5];

BB0_4:
	cvta.to.global.u64 	%rd6, %rd1;
	mad.lo.s32 	%r20, %r3, %r6, %r2;
	mad.lo.s32 	%r21, %r20, %r5, %r1;
	mul.wide.s32 	%rd7, %r21, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f5;

BB0_5:
	ret;
}


`
)
