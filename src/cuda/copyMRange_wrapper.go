package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"sync"
	"unsafe"

	"github.com/MathieuMoalic/amumax/src/cuda/cu"
	"github.com/MathieuMoalic/amumax/src/timer"
)

// CUDA handle for copyMRange kernel
var copyMRangeCode cu.Function

// Stores the arguments for copyMRange kernel invocation
type copyMRangeArgsT struct {
	argDst  unsafe.Pointer
	argSrc  unsafe.Pointer
	argNx   int
	argNy   int
	argNz   int
	argDx0  int
	argDy0  int
	argDz0  int
	argSx0  int
	argSy0  int
	argSz0  int
	argW    int
	argH    int
	argD    int
	argWrap int
	argptr  [15]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for copyMRange kernel invocation
var copyMRangeArgs copyMRangeArgsT

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	copyMRangeArgs.argptr[0] = unsafe.Pointer(&copyMRangeArgs.argDst)
	copyMRangeArgs.argptr[1] = unsafe.Pointer(&copyMRangeArgs.argSrc)
	copyMRangeArgs.argptr[2] = unsafe.Pointer(&copyMRangeArgs.argNx)
	copyMRangeArgs.argptr[3] = unsafe.Pointer(&copyMRangeArgs.argNy)
	copyMRangeArgs.argptr[4] = unsafe.Pointer(&copyMRangeArgs.argNz)
	copyMRangeArgs.argptr[5] = unsafe.Pointer(&copyMRangeArgs.argDx0)
	copyMRangeArgs.argptr[6] = unsafe.Pointer(&copyMRangeArgs.argDy0)
	copyMRangeArgs.argptr[7] = unsafe.Pointer(&copyMRangeArgs.argDz0)
	copyMRangeArgs.argptr[8] = unsafe.Pointer(&copyMRangeArgs.argSx0)
	copyMRangeArgs.argptr[9] = unsafe.Pointer(&copyMRangeArgs.argSy0)
	copyMRangeArgs.argptr[10] = unsafe.Pointer(&copyMRangeArgs.argSz0)
	copyMRangeArgs.argptr[11] = unsafe.Pointer(&copyMRangeArgs.argW)
	copyMRangeArgs.argptr[12] = unsafe.Pointer(&copyMRangeArgs.argH)
	copyMRangeArgs.argptr[13] = unsafe.Pointer(&copyMRangeArgs.argD)
	copyMRangeArgs.argptr[14] = unsafe.Pointer(&copyMRangeArgs.argWrap)
}

// Wrapper for copyMRange CUDA kernel, asynchronous.
func kCopyMRangeAsync(dst unsafe.Pointer, src unsafe.Pointer, Nx int, Ny int, Nz int, dx0 int, dy0 int, dz0 int, sx0 int, sy0 int, sz0 int, W int, H int, D int, wrap int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("copyMRange")
	}

	copyMRangeArgs.Lock()
	defer copyMRangeArgs.Unlock()

	if copyMRangeCode == 0 {
		copyMRangeCode = fatbinLoad(copyMRangeMap, "copyMRange")
	}

	copyMRangeArgs.argDst = dst
	copyMRangeArgs.argSrc = src
	copyMRangeArgs.argNx = Nx
	copyMRangeArgs.argNy = Ny
	copyMRangeArgs.argNz = Nz
	copyMRangeArgs.argDx0 = dx0
	copyMRangeArgs.argDy0 = dy0
	copyMRangeArgs.argDz0 = dz0
	copyMRangeArgs.argSx0 = sx0
	copyMRangeArgs.argSy0 = sy0
	copyMRangeArgs.argSz0 = sz0
	copyMRangeArgs.argW = W
	copyMRangeArgs.argH = H
	copyMRangeArgs.argD = D
	copyMRangeArgs.argWrap = wrap

	args := copyMRangeArgs.argptr[:]
	cu.LaunchKernel(copyMRangeCode, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("copyMRange")
	}
}

// maps compute capability on PTX code for copyMRange kernel.
var copyMRangeMap = map[int]string{
	0:  "",
	52: copyMRangePtx52,
}

// copyMRange PTX code for various compute capabilities.
const (
	copyMRangePtx52 = `
.version 8.4
.target sm_52
.address_size 64

	// .globl	copyMRange

.visible .entry copyMRange(
	.param .u64 copyMRange_param_0,
	.param .u64 copyMRange_param_1,
	.param .u32 copyMRange_param_2,
	.param .u32 copyMRange_param_3,
	.param .u32 copyMRange_param_4,
	.param .u32 copyMRange_param_5,
	.param .u32 copyMRange_param_6,
	.param .u32 copyMRange_param_7,
	.param .u32 copyMRange_param_8,
	.param .u32 copyMRange_param_9,
	.param .u32 copyMRange_param_10,
	.param .u32 copyMRange_param_11,
	.param .u32 copyMRange_param_12,
	.param .u32 copyMRange_param_13,
	.param .u32 copyMRange_param_14
)
{
	.reg .pred 	%p<21>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<66>;
	.reg .b64 	%rd<22>;


	ld.param.u64 	%rd1, [copyMRange_param_0];
	ld.param.u64 	%rd2, [copyMRange_param_1];
	ld.param.u32 	%r22, [copyMRange_param_2];
	ld.param.u32 	%r23, [copyMRange_param_3];
	ld.param.u32 	%r24, [copyMRange_param_4];
	ld.param.u32 	%r25, [copyMRange_param_5];
	ld.param.u32 	%r26, [copyMRange_param_6];
	ld.param.u32 	%r27, [copyMRange_param_7];
	ld.param.u32 	%r28, [copyMRange_param_8];
	ld.param.u32 	%r29, [copyMRange_param_9];
	ld.param.u32 	%r30, [copyMRange_param_10];
	ld.param.u32 	%r32, [copyMRange_param_11];
	ld.param.u32 	%r33, [copyMRange_param_12];
	ld.param.u32 	%r34, [copyMRange_param_13];
	ld.param.u32 	%r31, [copyMRange_param_14];
	mov.u32 	%r35, %ntid.x;
	mov.u32 	%r36, %ctaid.x;
	mov.u32 	%r37, %tid.x;
	mad.lo.s32 	%r1, %r36, %r35, %r37;
	mov.u32 	%r38, %ntid.y;
	mov.u32 	%r39, %ctaid.y;
	mov.u32 	%r40, %tid.y;
	mad.lo.s32 	%r2, %r39, %r38, %r40;
	mov.u32 	%r41, %ntid.z;
	mov.u32 	%r42, %ctaid.z;
	mov.u32 	%r43, %tid.z;
	mad.lo.s32 	%r3, %r42, %r41, %r43;
	setp.ge.s32 	%p1, %r1, %r32;
	setp.ge.s32 	%p2, %r2, %r33;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r34;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_6;

	add.s32 	%r60, %r1, %r28;
	add.s32 	%r61, %r2, %r29;
	add.s32 	%r62, %r3, %r30;
	add.s32 	%r63, %r1, %r25;
	add.s32 	%r64, %r2, %r26;
	add.s32 	%r65, %r3, %r27;
	setp.eq.s32 	%p6, %r31, 0;
	@%p6 bra 	$L__BB0_3;

	rem.s32 	%r44, %r60, %r22;
	add.s32 	%r45, %r44, %r22;
	rem.s32 	%r60, %r45, %r22;
	rem.s32 	%r46, %r61, %r23;
	add.s32 	%r47, %r46, %r23;
	rem.s32 	%r61, %r47, %r23;
	rem.s32 	%r48, %r62, %r24;
	add.s32 	%r49, %r48, %r24;
	rem.s32 	%r62, %r49, %r24;
	rem.s32 	%r50, %r63, %r22;
	add.s32 	%r51, %r50, %r22;
	rem.s32 	%r63, %r51, %r22;
	rem.s32 	%r52, %r64, %r23;
	add.s32 	%r53, %r52, %r23;
	rem.s32 	%r64, %r53, %r23;
	rem.s32 	%r54, %r65, %r24;
	add.s32 	%r55, %r54, %r24;
	rem.s32 	%r65, %r55, %r24;

$L__BB0_5:
	mul.wide.s32 	%rd3, %r62, %r23;
	cvt.s64.s32 	%rd4, %r61;
	add.s64 	%rd5, %rd3, %rd4;
	cvt.s64.s32 	%rd6, %r22;
	mul.lo.s64 	%rd7, %rd5, %rd6;
	cvt.s64.s32 	%rd8, %r60;
	add.s64 	%rd9, %rd7, %rd8;
	mul.wide.s32 	%rd10, %r65, %r23;
	cvt.s64.s32 	%rd11, %r64;
	add.s64 	%rd12, %rd10, %rd11;
	mul.lo.s64 	%rd13, %rd12, %rd6;
	cvt.s64.s32 	%rd14, %r63;
	add.s64 	%rd15, %rd13, %rd14;
	cvta.to.global.u64 	%rd16, %rd2;
	shl.b64 	%rd17, %rd9, 2;
	add.s64 	%rd18, %rd16, %rd17;
	ld.global.nc.f32 	%f1, [%rd18];
	cvta.to.global.u64 	%rd19, %rd1;
	shl.b64 	%rd20, %rd15, 2;
	add.s64 	%rd21, %rd19, %rd20;
	st.global.f32 	[%rd21], %f1;

$L__BB0_6:
	ret;

$L__BB0_3:
	or.b32  	%r56, %r61, %r60;
	or.b32  	%r57, %r56, %r62;
	setp.lt.s32 	%p7, %r57, 0;
	setp.ge.s32 	%p8, %r60, %r22;
	or.pred  	%p9, %p8, %p7;
	setp.ge.s32 	%p10, %r61, %r23;
	or.pred  	%p11, %p10, %p9;
	setp.ge.s32 	%p12, %r62, %r24;
	or.pred  	%p13, %p12, %p11;
	@%p13 bra 	$L__BB0_6;

	or.b32  	%r58, %r64, %r63;
	or.b32  	%r59, %r58, %r65;
	setp.lt.s32 	%p14, %r59, 0;
	setp.ge.s32 	%p15, %r63, %r22;
	or.pred  	%p16, %p15, %p14;
	setp.ge.s32 	%p17, %r64, %r23;
	or.pred  	%p18, %p17, %p16;
	setp.ge.s32 	%p19, %r65, %r24;
	or.pred  	%p20, %p19, %p18;
	@%p20 bra 	$L__BB0_6;
	bra.uni 	$L__BB0_5;

}

`
)
