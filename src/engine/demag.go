package engine

// Calculation of magnetostatic field

import (
	"fmt"

	"github.com/MathieuMoalic/amumax/src/cuda"
	"github.com/MathieuMoalic/amumax/src/data"
	"github.com/MathieuMoalic/amumax/src/mag"
)

// Demag variables
var (
	Msat        = newScalarParam("Msat", "A/m", "Saturation magnetization")
	M_full      = newVectorField("m_full", "A/m", "Unnormalized magnetization", setMFull)
	B_demag     = newVectorField("B_demag", "T", "Magnetostatic field", setDemagField)
	Edens_demag = newScalarField("Edens_demag", "J/m3", "Magnetostatic energy density", AddEdens_demag)
	E_demag     = newScalarValue("E_demag", "J", "Magnetostatic energy", getDemagEnergy)

	EnableDemag   = true // enable/disable global demag field
	NoDemagSpins  = newScalarParam("NoDemagSpins", "", "Disable magnetostatic interaction per region (default=0, set to 1 to disable). ")
	conv_         *cuda.DemagConvolution // does the heavy lifting
	DemagAccuracy = 6.0                  // Demag accuracy (divide cubes in at most N^3 points)
)

var AddEdens_demag = makeEdensAdder(&B_demag, -0.5)

func init() {
	registerEnergy(getDemagEnergy, AddEdens_demag)
}

// Sets dst to the current demag field
func setDemagField(dst *data.Slice) {
	if EnableDemag {
		msat := Msat.MSlice()
		defer msat.Recycle()
		if NoDemagSpins.isZero() {
			// Normal demag, everywhere
			demagConv().Exec(dst, normMag.Buffer(), Geometry.Gpu(), msat)
		} else {
			setMaskedDemagField(dst, msat)
		}
	} else {
		cuda.Zero(dst) // will ADD other terms to it
	}
}

// Sets dst to the demag field, but cells where NoDemagSpins != 0 do not generate nor receive field.
func setMaskedDemagField(dst *data.Slice, msat cuda.MSlice) {
	// No-demag spins: mask-out geometry with zeros where NoDemagSpins is set,
	// so these spins do not generate a field

	buf := cuda.Buffer(SCALAR, Geometry.Gpu().Size()) // masked-out geometry
	defer cuda.Recycle(buf)

	// obtain a copy of the geometry mask, which we can overwrite
	geom, r := Geometry.Slice()
	if r {
		defer cuda.Recycle(geom)
	}
	data.Copy(buf, geom)

	// mask-out
	cuda.ZeroMask(buf, NoDemagSpins.gpuLUT1(), Regions.Gpu())

	// convolution with masked-out cells.
	demagConv().Exec(dst, normMag.Buffer(), buf, msat)

	// After convolution, mask-out the field in the NoDemagSpins cells
	// so they don't feel the field generated by others.
	cuda.ZeroMask(dst, NoDemagSpins.gpuLUT1(), Regions.Gpu())
}

// Sets dst to the full (unnormalized) magnetization in A/m
func setMFull(dst *data.Slice) {
	// scale m by Msat...
	msat, rM := Msat.Slice()
	if rM {
		defer cuda.Recycle(msat)
	}
	for c := 0; c < 3; c++ {
		cuda.Mul(dst.Comp(c), normMag.Buffer().Comp(c), msat)
	}

	// ...and by cell volume if applicable
	vol, rV := Geometry.Slice()
	if rV {
		defer cuda.Recycle(vol)
	}
	if !vol.IsNil() {
		for c := 0; c < 3; c++ {
			cuda.Mul(dst.Comp(c), dst.Comp(c), vol)
		}
	}
}

// returns demag convolution, making sure it's initialized
func demagConv() *cuda.DemagConvolution {
	if conv_ == nil {
		setBusy(true)
		defer setBusy(false)
		// these 2 lines make sure the progress bar doesn't break when calculating the kernel
		fmt.Print("\033[2K\r") // clearline ANSI escape code
		kernel := mag.DemagKernel(getMesh().Size(), getMesh().PBC(), getMesh().CellSize(), DemagAccuracy, CacheDir, ShowProgresBar)
		conv_ = cuda.NewDemag(getMesh().Size(), getMesh().PBC(), kernel, SelfTest)
	}
	return conv_
}

// Returns the current demag energy in Joules.
func getDemagEnergy() float64 {
	return -0.5 * cellVolume() * dot(&M_full, &B_demag)
}
